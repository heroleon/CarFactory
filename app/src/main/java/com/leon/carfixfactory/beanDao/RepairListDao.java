package com.leon.carfixfactory.beanDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.leon.carfixfactory.bean.RepairList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REPAIR_LIST".
*/
public class RepairListDao extends AbstractDao<RepairList, Void> {

    public static final String TABLENAME = "REPAIR_LIST";

    /**
     * Properties of entity RepairList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CarId = new Property(0, Long.class, "carId", false, "CAR_ID");
        public final static Property AccessoryName = new Property(1, String.class, "accessoryName", false, "ACCESSORY_NAME");
        public final static Property AccessoryPrice = new Property(2, double.class, "accessoryPrice", false, "ACCESSORY_PRICE");
    }


    public RepairListDao(DaoConfig config) {
        super(config);
    }
    
    public RepairListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REPAIR_LIST\" (" + //
                "\"CAR_ID\" INTEGER," + // 0: carId
                "\"ACCESSORY_NAME\" TEXT," + // 1: accessoryName
                "\"ACCESSORY_PRICE\" REAL NOT NULL );"); // 2: accessoryPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REPAIR_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RepairList entity) {
        stmt.clearBindings();
 
        Long carId = entity.getCarId();
        if (carId != null) {
            stmt.bindLong(1, carId);
        }
 
        String accessoryName = entity.getAccessoryName();
        if (accessoryName != null) {
            stmt.bindString(2, accessoryName);
        }
        stmt.bindDouble(3, entity.getAccessoryPrice());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RepairList entity) {
        stmt.clearBindings();
 
        Long carId = entity.getCarId();
        if (carId != null) {
            stmt.bindLong(1, carId);
        }
 
        String accessoryName = entity.getAccessoryName();
        if (accessoryName != null) {
            stmt.bindString(2, accessoryName);
        }
        stmt.bindDouble(3, entity.getAccessoryPrice());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public RepairList readEntity(Cursor cursor, int offset) {
        RepairList entity = new RepairList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // carId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // accessoryName
            cursor.getDouble(offset + 2) // accessoryPrice
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RepairList entity, int offset) {
        entity.setCarId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccessoryName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccessoryPrice(cursor.getDouble(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(RepairList entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(RepairList entity) {
        return null;
    }

    @Override
    public boolean hasKey(RepairList entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
