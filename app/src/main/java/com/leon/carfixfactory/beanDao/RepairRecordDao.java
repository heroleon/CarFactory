package com.leon.carfixfactory.beanDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.leon.carfixfactory.bean.RepairRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REPAIR_RECORD".
*/
public class RepairRecordDao extends AbstractDao<RepairRecord, Long> {

    public static final String TABLENAME = "REPAIR_RECORD";

    /**
     * Properties of entity RepairRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RepairId = new Property(0, Long.class, "repairId", true, "_id");
        public final static Property DriverId = new Property(1, Long.class, "driverId", false, "DRIVER_ID");
        public final static Property RepairOrderId = new Property(2, String.class, "repairOrderId", false, "REPAIR_ORDER_ID");
        public final static Property ArrivalTime = new Property(3, long.class, "arrivalTime", false, "ARRIVAL_TIME");
        public final static Property DeliveryTime = new Property(4, long.class, "deliveryTime", false, "DELIVERY_TIME");
        public final static Property RepairMileage = new Property(5, String.class, "repairMileage", false, "REPAIR_MILEAGE");
        public final static Property RepairTotalFee = new Property(6, String.class, "repairTotalFee", false, "REPAIR_TOTAL_FEE");
        public final static Property RepairDesc = new Property(7, String.class, "repairDesc", false, "REPAIR_DESC");
        public final static Property TotalPartFee = new Property(8, String.class, "totalPartFee", false, "TOTAL_PART_FEE");
        public final static Property TotalAccessoryFee = new Property(9, String.class, "totalAccessoryFee", false, "TOTAL_ACCESSORY_FEE");
        public final static Property RepairState = new Property(10, int.class, "repairState", false, "REPAIR_STATE");
        public final static Property DutyPersonName = new Property(11, String.class, "dutyPersonName", false, "DUTY_PERSON_NAME");
        public final static Property DutyPersonId = new Property(12, String.class, "dutyPersonId", false, "DUTY_PERSON_ID");
    }


    public RepairRecordDao(DaoConfig config) {
        super(config);
    }
    
    public RepairRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REPAIR_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: repairId
                "\"DRIVER_ID\" INTEGER," + // 1: driverId
                "\"REPAIR_ORDER_ID\" TEXT," + // 2: repairOrderId
                "\"ARRIVAL_TIME\" INTEGER NOT NULL ," + // 3: arrivalTime
                "\"DELIVERY_TIME\" INTEGER NOT NULL ," + // 4: deliveryTime
                "\"REPAIR_MILEAGE\" TEXT," + // 5: repairMileage
                "\"REPAIR_TOTAL_FEE\" TEXT," + // 6: repairTotalFee
                "\"REPAIR_DESC\" TEXT," + // 7: repairDesc
                "\"TOTAL_PART_FEE\" TEXT," + // 8: totalPartFee
                "\"TOTAL_ACCESSORY_FEE\" TEXT," + // 9: totalAccessoryFee
                "\"REPAIR_STATE\" INTEGER NOT NULL ," + // 10: repairState
                "\"DUTY_PERSON_NAME\" TEXT," + // 11: dutyPersonName
                "\"DUTY_PERSON_ID\" TEXT);"); // 12: dutyPersonId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REPAIR_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RepairRecord entity) {
        stmt.clearBindings();
 
        Long repairId = entity.getRepairId();
        if (repairId != null) {
            stmt.bindLong(1, repairId);
        }
 
        Long driverId = entity.getDriverId();
        if (driverId != null) {
            stmt.bindLong(2, driverId);
        }
 
        String repairOrderId = entity.getRepairOrderId();
        if (repairOrderId != null) {
            stmt.bindString(3, repairOrderId);
        }
        stmt.bindLong(4, entity.getArrivalTime());
        stmt.bindLong(5, entity.getDeliveryTime());
 
        String repairMileage = entity.getRepairMileage();
        if (repairMileage != null) {
            stmt.bindString(6, repairMileage);
        }
 
        String repairTotalFee = entity.getRepairTotalFee();
        if (repairTotalFee != null) {
            stmt.bindString(7, repairTotalFee);
        }
 
        String repairDesc = entity.getRepairDesc();
        if (repairDesc != null) {
            stmt.bindString(8, repairDesc);
        }
 
        String totalPartFee = entity.getTotalPartFee();
        if (totalPartFee != null) {
            stmt.bindString(9, totalPartFee);
        }
 
        String totalAccessoryFee = entity.getTotalAccessoryFee();
        if (totalAccessoryFee != null) {
            stmt.bindString(10, totalAccessoryFee);
        }
        stmt.bindLong(11, entity.getRepairState());
 
        String dutyPersonName = entity.getDutyPersonName();
        if (dutyPersonName != null) {
            stmt.bindString(12, dutyPersonName);
        }
 
        String dutyPersonId = entity.getDutyPersonId();
        if (dutyPersonId != null) {
            stmt.bindString(13, dutyPersonId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RepairRecord entity) {
        stmt.clearBindings();
 
        Long repairId = entity.getRepairId();
        if (repairId != null) {
            stmt.bindLong(1, repairId);
        }
 
        Long driverId = entity.getDriverId();
        if (driverId != null) {
            stmt.bindLong(2, driverId);
        }
 
        String repairOrderId = entity.getRepairOrderId();
        if (repairOrderId != null) {
            stmt.bindString(3, repairOrderId);
        }
        stmt.bindLong(4, entity.getArrivalTime());
        stmt.bindLong(5, entity.getDeliveryTime());
 
        String repairMileage = entity.getRepairMileage();
        if (repairMileage != null) {
            stmt.bindString(6, repairMileage);
        }
 
        String repairTotalFee = entity.getRepairTotalFee();
        if (repairTotalFee != null) {
            stmt.bindString(7, repairTotalFee);
        }
 
        String repairDesc = entity.getRepairDesc();
        if (repairDesc != null) {
            stmt.bindString(8, repairDesc);
        }
 
        String totalPartFee = entity.getTotalPartFee();
        if (totalPartFee != null) {
            stmt.bindString(9, totalPartFee);
        }
 
        String totalAccessoryFee = entity.getTotalAccessoryFee();
        if (totalAccessoryFee != null) {
            stmt.bindString(10, totalAccessoryFee);
        }
        stmt.bindLong(11, entity.getRepairState());
 
        String dutyPersonName = entity.getDutyPersonName();
        if (dutyPersonName != null) {
            stmt.bindString(12, dutyPersonName);
        }
 
        String dutyPersonId = entity.getDutyPersonId();
        if (dutyPersonId != null) {
            stmt.bindString(13, dutyPersonId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RepairRecord readEntity(Cursor cursor, int offset) {
        RepairRecord entity = new RepairRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // repairId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // driverId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // repairOrderId
            cursor.getLong(offset + 3), // arrivalTime
            cursor.getLong(offset + 4), // deliveryTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // repairMileage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // repairTotalFee
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // repairDesc
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // totalPartFee
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // totalAccessoryFee
            cursor.getInt(offset + 10), // repairState
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // dutyPersonName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // dutyPersonId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RepairRecord entity, int offset) {
        entity.setRepairId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDriverId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRepairOrderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArrivalTime(cursor.getLong(offset + 3));
        entity.setDeliveryTime(cursor.getLong(offset + 4));
        entity.setRepairMileage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRepairTotalFee(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRepairDesc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTotalPartFee(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTotalAccessoryFee(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRepairState(cursor.getInt(offset + 10));
        entity.setDutyPersonName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDutyPersonId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RepairRecord entity, long rowId) {
        entity.setRepairId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RepairRecord entity) {
        if(entity != null) {
            return entity.getRepairId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RepairRecord entity) {
        return entity.getRepairId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
